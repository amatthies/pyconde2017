language: python

python: '3.4' # python 3.6 takes time, we install with conda
sudo: false

env:
  global:
    - AWS_DEFAULT_REGION=eu-west-1
  matrix:
    - CONDA_PYTHON_VERSION=3.6.1

before_install:
  # Install conda
  - wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda config --set show_channel_urls True
  - conda config --set auto_update_conda False
  # add channels, defaults has the highest priority
  - conda config -f --add channels conda-forge
  - conda config -f --add channels defaults
  - conda install -n root _license
  # stick to conda 4.3.27, at least as long as conda-forge does
  - conda install conda=4.3.27
  - conda info -a

install:
  # create a test env from conda-dev-env.yml
  - conda env create -n testenv_$CONDA_PYTHON_VERSION -f $TRAVIS_BUILD_DIR/conda-dev-env.yml
  - source activate testenv_$CONDA_PYTHON_VERSION
  - conda list # for info purpose only

script:
  # run tests
  - py.test -vv -r sxX

after_success:
  # clean up
  - rm -rf deps
  - rm -rf .github
  - rm -rf .git
  # remove __pycache__ folders and .pyc files
  - find . \( -name \*.pyc -o -name \*.pyo -o -name __pycache__ \) -prune -exec rm -rf {} +
  # remove the conda installer in the current folder
  - rm miniconda.sh

before_deploy:
  - zip -r latest .
  # create deployment folder
  - mkdir -p deploy_dest
  # copy zip files to deployment folder
  - cp latest.zip deploy_dest/$TRAVIS_COMMIT.zip
  - mv latest.zip deploy_dest/latest.zip


deploy:
  # Staging environment
  - env:               staging
    provider:          s3
    access_key_id:     $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket:            $AWS_BUCKET
    region:            $AWS_BUCKET_REGION
    local_dir:         deploy_dest
    upload-dir:        $TRAVIS_REPO_SLUG/staging
    acl:               private # keep them private
    skip_cleanup:      true
    on:
      condition: "$TRAVIS_BRANCH != master"
      all_branches: true
  # Production environment
  - env:               production
    provider:          s3
    access_key_id:     $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket:            $AWS_BUCKET
    region:            $AWS_BUCKET_REGION
    local_dir:         deploy_dest
    upload-dir:        $TRAVIS_REPO_SLUG/production
    acl:               private # keep them private
    skip_cleanup:      true
    on:
      branch: master

notifications:
  email: true
